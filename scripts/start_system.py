#!/usr/bin/env python3
"""
Script principal para inicializar o sistema RAG para planilhas de obras p√∫blicas.
"""

import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio src ao path
src_path = Path(__file__).parent.parent / "src"
sys.path.insert(0, str(src_path))

from config.config import validate_config, create_directories, get_config
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
import time

console = Console()

def show_banner():
    """Exibe o banner do sistema."""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                              ‚ïë
    ‚ïë    Sistema RAG para Planilhas de Obras P√∫blicas v1.0.0      ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë    Processamento e Consulta de Pre√ßos de Refer√™ncia         ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    console.print(Panel(banner, style="bold blue"))

def check_requirements():
    """Verifica se os requisitos do sistema est√£o atendidos."""
    console.print("\n[bold yellow]üîç Verificando requisitos do sistema...[/bold yellow]")
    
    requirements = [
        ("Python 3.8+", sys.version_info >= (3, 8)),
        ("Diret√≥rio de monitoramento", Path(get_config("file_monitor")["watch_directory"]).exists()),
        ("Permiss√µes de escrita", os.access(Path(__file__).parent.parent, os.W_OK)),
    ]
    
    table = Table(title="Status dos Requisitos")
    table.add_column("Requisito", style="cyan")
    table.add_column("Status", style="green")
    
    all_ok = True
    for req, status in requirements:
        status_text = "‚úÖ OK" if status else "‚ùå FALHOU"
        table.add_row(req, status_text)
        if not status:
            all_ok = False
    
    console.print(table)
    return all_ok

def initialize_system():
    """Inicializa o sistema."""
    console.print("\n[bold green]üöÄ Inicializando sistema...[/bold green]")
    
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
    ) as progress:
        
        # Criar diret√≥rios
        task1 = progress.add_task("Criando diret√≥rios...", total=None)
        create_directories()
        progress.update(task1, completed=True)
        
        # Validar configura√ß√µes
        task2 = progress.add_task("Validando configura√ß√µes...", total=None)
        time.sleep(1)  # Simular valida√ß√£o
        config_valid = validate_config()
        progress.update(task2, completed=True)
        
        # Verificar banco de dados
        task3 = progress.add_task("Verificando banco de dados...", total=None)
        time.sleep(1)  # Simular verifica√ß√£o
        progress.update(task3, completed=True)
        
        # Verificar ChromaDB
        task4 = progress.add_task("Verificando ChromaDB...", total=None)
        time.sleep(1)  # Simular verifica√ß√£o
        progress.update(task4, completed=True)
    
    return config_valid

def show_menu():
    """Exibe o menu principal do sistema."""
    menu_options = [
        ("1", "Iniciar Langflow", "Interface web para consultas"),
        ("2", "Monitor de Arquivos", "Monitorar pasta de documentos"),
        ("3", "Processar Arquivos", "Processar arquivos pendentes"),
        ("4", "Consultar Servi√ßos", "Buscar servi√ßos no banco"),
        ("5", "Relat√≥rios", "Gerar relat√≥rios de processamento"),
        ("6", "Configura√ß√µes", "Gerenciar configura√ß√µes"),
        ("0", "Sair", "Encerrar o sistema"),
    ]
    
    table = Table(title="Menu Principal")
    table.add_column("Op√ß√£o", style="cyan", no_wrap=True)
    table.add_column("A√ß√£o", style="white")
    table.add_column("Descri√ß√£o", style="dim")
    
    for option, action, description in menu_options:
        table.add_row(option, action, description)
    
    console.print(table)

def main():
    """Fun√ß√£o principal."""
    try:
        # Exibir banner
        show_banner()
        
        # Verificar requisitos
        if not check_requirements():
            console.print("\n[bold red]‚ùå Requisitos n√£o atendidos. Verifique as configura√ß√µes.[/bold red]")
            return 1
        
        # Inicializar sistema
        if not initialize_system():
            console.print("\n[bold red]‚ùå Falha na inicializa√ß√£o do sistema.[/bold red]")
            return 1
        
        console.print("\n[bold green]‚úÖ Sistema inicializado com sucesso![/bold green]")
        
        # Exibir menu principal
        while True:
            show_menu()
            
            choice = console.input("\n[bold cyan]Escolha uma op√ß√£o: [/bold cyan]")
            
            if choice == "1":
                console.print("\n[bold yellow]üåê Iniciando Langflow...[/bold yellow]")
                # TODO: Implementar inicializa√ß√£o do Langflow
                console.print("Funcionalidade em desenvolvimento...")
                
            elif choice == "2":
                console.print("\n[bold yellow]üìÅ Iniciando monitor de arquivos...[/bold yellow]")
                # TODO: Implementar monitor de arquivos
                console.print("Funcionalidade em desenvolvimento...")
                
            elif choice == "3":
                console.print("\n[bold yellow]‚öôÔ∏è Iniciando processamento de arquivos...[/bold yellow]")
                # TODO: Implementar processamento
                console.print("Funcionalidade em desenvolvimento...")
                
            elif choice == "4":
                console.print("\n[bold yellow]üîç Iniciando consulta de servi√ßos...[/bold yellow]")
                # TODO: Implementar consulta
                console.print("Funcionalidade em desenvolvimento...")
                
            elif choice == "5":
                console.print("\n[bold yellow]üìä Gerando relat√≥rios...[/bold yellow]")
                # TODO: Implementar relat√≥rios
                console.print("Funcionalidade em desenvolvimento...")
                
            elif choice == "6":
                console.print("\n[bold yellow]‚öôÔ∏è Abrindo configura√ß√µes...[/bold yellow]")
                # TODO: Implementar configura√ß√µes
                console.print("Funcionalidade em desenvolvimento...")
                
            elif choice == "0":
                console.print("\n[bold green]üëã Encerrando sistema...[/bold green]")
                break
                
            else:
                console.print("\n[bold red]‚ùå Op√ß√£o inv√°lida![/bold red]")
            
            console.input("\nPressione Enter para continuar...")
        
        return 0
        
    except KeyboardInterrupt:
        console.print("\n\n[bold yellow]‚ö†Ô∏è Interrup√ß√£o do usu√°rio. Encerrando...[/bold yellow]")
        return 0
        
    except Exception as e:
        console.print(f"\n[bold red]‚ùå Erro inesperado: {e}[/bold red]")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 